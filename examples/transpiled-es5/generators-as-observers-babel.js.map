{"version":3,"sources":["../es6/generators-as-observers.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACX,eAAY,CAAC;;oBAiBA,qBAAqB;AAf/B,YAAS,cAAc,CAAC,OAAO,EAAE;;;AAG7B,aAAO,YAAkB;;AAErB,aAAI,SAAS,GAAG,OAAO,4BAAS,CAAC;;;AAGjC,kBAAS,CAAC,IAAI,EAAE,CAAC;;;AAGjB,gBAAO,SAAS,CAAC;OACpB,CAAC;IACL;;AAED,YAAU,qBAAqB;UAIvB,SAAS,EAKR,QAAQ;;;;AARb,sBAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;;;;;;;AAG5B,wBAAS;;AACb,sBAAO,CAAC,GAAG,kBAAgB,SAAS,CAAG,CAAC;;;;;;;AAInC,uBAAQ;;AACZ,sBAAO,CAAC,GAAG,iBAAe,QAAQ,CAAG,CAAC;;AAEtC,sBAAO,CAAC,GAAG,cAAY,QAAQ,UAAK,SAAS,OAAI,CAAC;;;;;;;;AAGlD,sBAAO,CAAC,GAAG,CAAC,yBAAyB,iBAAI,CAAC;;;;;AAGhD,sBAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;;;AAE1B,sBAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;;;;;IACjB;;AAED,OAAI,cAAc,GAAG,qBAAqB,EAAE,CAAC;;;;;AAK7C,UAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;;;;;AAKnC,UAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;;;;AAO3C,UAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;;AAI9C,UAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;;;;;;;AAOnC,OAAI,qBAAqB,GAAG,cAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;;AAKpE,UAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;;;;AAOlD,UAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;;AAIxD,OAAI,kBAAkB,GAAG,cAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;;;;AAOjE,UAAO,CAAC,GAAG,CAAC,kBAAkB,UAAO,iBAAgB,CAAC,CAAC;;;;AAIvD,OAAI,mBAAmB,GAAG,cAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;;;AAMlE,UAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;;;;AAOhD,UAAO,CAAC,GAAG,CAAC,mBAAmB,UAAO,iBAAgB,CAAC,CAAC;;AAExD,OAAI,iBAAiB,GAAG,cAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;;;AAMhE,UAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;;;;;AAQ9C,UAAO,CAAC,GAAG,CAAC,iBAAiB,SAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;CAEzD,CAAA,EAAI,CAAC","file":"generators-as-observers-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n    function genAutoAdvance(genFunc) {\n        // Return a generator function wrapper that will advance the\n        // generator before returning it\n        return function(...args) {\n            // Call the generator function (passing through arguments)\n            let generator = genFunc(...args);\n\n            // Call `.next()` to advance to first `yield`\n            generator.next();\n\n            // Return generator now that it's been advanced\n            return generator;\n        };\n    }\n\n    function* getSimpleDataConsumer() {\n        console.log('Waiting for data');\n\n        // Assign first sent value to `firstName` and log it\n        let firstName = yield;\n        console.log(`First Name: ${firstName}`);\n\n\t\ttry {\n\t        // Assign second sent value to `lastName` and log it\n\t        let lastName = yield;\n\t        console.log(`Last Name: ${lastName}`);\n\n\t        console.log(`Welcome ${lastName}, ${firstName}!`);\n\t\t}\n\t    catch (e) {\n\t        console.log('Caught on your behalf: ', e);\n\t    }\n\t\tfinally {\n\t\t\tconsole.log('All done!');\n\t\t}\n\t\tconsole.log('here');\n    }\n\n    let simpleObserver = getSimpleDataConsumer();\n\n    // output:\n    // Waiting for data\n    // {value: undefined, done: false}\n    console.log(simpleObserver.next());\n\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n    console.log(simpleObserver.next('George'));\n\n    // output:\n    // Last Name: Jefferson\n    // Welcome Jefferson, George!\n\t// All done!\n    // {value: undefined, done: true}\n    console.log(simpleObserver.next('Jefferson'));\n\n    // output:\n    // {value: undefined, done: true}\n    console.log(simpleObserver.next());\n\n\t// wrap `getSimpleDataConsumer` with `genAutoAdvance` helper so\n\t// that the resultant generator is already advanced to the first\n\t// `yield` so we can pass data to `.next()` immediately\n    // output:\n    // Waiting for data\n    let wrappedSimpleObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n    console.log(wrappedSimpleObserver.next('George'));\n\n    // output:\n    // Last Name: Jefferson\n    // Welcome Jefferson, George!\n\t// All done!\n    // {value: undefined, done: true}\n    console.log(wrappedSimpleObserver.next('Jefferson'));\n\n\t// output:\n\t// Waiting for data\n\tlet returnableObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Immediately call `.return()` on the observer\n\t// Since we weren't yet in try-finally, generation\n\t// function returns immediately\n\t// output:\n\t// {value: 'It\\'s over...', done: true}\n\tconsole.log(returnableObserver.return(`It's over...`));\n\n\t// output:\n\t// Waiting for data\n\tlet returnableObserver2 = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Call `.next()` like normal\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n\tconsole.log(returnableObserver2.next('George'));\n\n\t// Now return when in the try-finally. The `finally` gets\n\t// executed\n\t// output:\n\t// All done!\n\t// {value: 'It\\'s over...', done: true}\n\tconsole.log(returnableObserver2.return(`It's over...`));\n\n\tlet throwableObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Call `.next()` like normal\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n\tconsole.log(throwableObserver.next('George'));\n\n\t// Now throw when in the try-catch. The `catch` & `finally`\n\t// get executed\n\t// output:\n\t// Caught on your behalf: [error object]\n\t// All done!\n\t// {value: undefined, done: true}\n\tconsole.log(throwableObserver.throw(new Error('boom!')));\n\n}) ();\n"]}