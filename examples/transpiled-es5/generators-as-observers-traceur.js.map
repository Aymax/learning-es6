{"version":3,"sources":["../es6/generators-as-observers.js"],"names":[],"mappings":"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","file":"/Users/benmvp/github/benmvp/learning-es6/examples/transpiled-es5/generators-as-observers-traceur.js","sourcesContent":["(function() {\n\t'use strict';\n\n    function genAutoAdvance(genFunc) {\n        // Return a generator function wrapper that will advance the\n        // generator before returning it\n        return function(...args) {\n            // Call the generator function (passing through arguments)\n            let generator = genFunc(...args);\n\n            // Call `.next()` to advance to first `yield`\n            generator.next();\n\n            // Return generator now that it's been advanced\n            return generator;\n        };\n    }\n\n    function* getSimpleDataConsumer() {\n        console.log('Waiting for data');\n\n        // Assign first sent value to `firstName` and log it\n        let firstName = yield;\n        console.log(`First Name: ${firstName}`);\n\n\t\ttry {\n\t        // Assign second sent value to `lastName` and log it\n\t        let lastName = yield;\n\t        console.log(`Last Name: ${lastName}`);\n\n\t        console.log(`Welcome ${lastName}, ${firstName}!`);\n\t\t}\n\t    catch (e) {\n\t        console.log('Caught on your behalf: ', e);\n\t    }\n\t\tfinally {\n\t\t\tconsole.log('All done!');\n\t\t}\n\t\tconsole.log('here');\n    }\n\n    let simpleObserver = getSimpleDataConsumer();\n\n    // output:\n    // Waiting for data\n    // {value: undefined, done: false}\n    console.log(simpleObserver.next());\n\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n    console.log(simpleObserver.next('George'));\n\n    // output:\n    // Last Name: Jefferson\n    // Welcome Jefferson, George!\n\t// All done!\n    // {value: undefined, done: true}\n    console.log(simpleObserver.next('Jefferson'));\n\n    // output:\n    // {value: undefined, done: true}\n    console.log(simpleObserver.next());\n\n\t// wrap `getSimpleDataConsumer` with `genAutoAdvance` helper so\n\t// that the resultant generator is already advanced to the first\n\t// `yield` so we can pass data to `.next()` immediately\n    // output:\n    // Waiting for data\n    let wrappedSimpleObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n    console.log(wrappedSimpleObserver.next('George'));\n\n    // output:\n    // Last Name: Jefferson\n    // Welcome Jefferson, George!\n\t// All done!\n    // {value: undefined, done: true}\n    console.log(wrappedSimpleObserver.next('Jefferson'));\n\n\t// output:\n\t// Waiting for data\n\tlet returnableObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Immediately call `.return()` on the observer\n\t// Since we weren't yet in try-finally, generation\n\t// function returns immediately\n\t// output:\n\t// {value: 'It\\'s over...', done: true}\n\tconsole.log(returnableObserver.return(`It's over...`));\n\n\t// output:\n\t// Waiting for data\n\tlet returnableObserver2 = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Call `.next()` like normal\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n\tconsole.log(returnableObserver2.next('George'));\n\n\t// Now return when in the try-finally. The `finally` gets\n\t// executed\n\t// output:\n\t// All done!\n\t// {value: 'It\\'s over...', done: true}\n\tconsole.log(returnableObserver2.return(`It's over...`));\n\n\tlet throwableObserver = genAutoAdvance(getSimpleDataConsumer)();\n\n\t// Call `.next()` like normal\n    // output:\n    // First Name: George\n    // {value: undefined, done: false}\n\tconsole.log(throwableObserver.next('George'));\n\n\t// Now throw when in the try-catch. The `catch` & `finally`\n\t// get executed\n\t// output:\n\t// Caught on your behalf: [error object]\n\t// All done!\n\t// {value: undefined, done: true}\n\tconsole.log(throwableObserver.throw(new Error('boom!')));\n\n}) ();\n"]}